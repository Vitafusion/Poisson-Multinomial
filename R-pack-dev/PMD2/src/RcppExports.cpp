// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// mod
int mod(int a, int n);
RcppExport SEXP _PMD_mod(SEXP aSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(mod(a, n));
    return rcpp_result_gen;
END_RCPP
}
// l_vec_compute_arma
void l_vec_compute_arma(int k, arma::vec& l_vec, arma::vec& cn_vec, int m);
RcppExport SEXP _PMD_l_vec_compute_arma(SEXP kSEXP, SEXP l_vecSEXP, SEXP cn_vecSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type l_vec(l_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type cn_vec(cn_vecSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    l_vec_compute_arma(k, l_vec, cn_vec, m);
    return R_NilValue;
END_RCPP
}
// pmn_mdfft_arma
arma::vec pmn_mdfft_arma(int nnt, arma::mat pp, arma::vec nn_vec, arma::vec l_vec, arma::vec cn_vec);
RcppExport SEXP _PMD_pmn_mdfft_arma(SEXP nntSEXP, SEXP ppSEXP, SEXP nn_vecSEXP, SEXP l_vecSEXP, SEXP cn_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nnt(nntSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type pp(ppSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type nn_vec(nn_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type l_vec(l_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type cn_vec(cn_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(pmn_mdfft_arma(nnt, pp, nn_vec, l_vec, cn_vec));
    return rcpp_result_gen;
END_RCPP
}
// rmultinom_1
Rcpp::IntegerVector rmultinom_1(unsigned int& size, Rcpp:: NumericVector& probs, unsigned int& N);
RcppExport SEXP _PMD_rmultinom_1(SEXP sizeSEXP, SEXP probsSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int& >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp:: NumericVector& >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< unsigned int& >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(rmultinom_1(size, probs, N));
    return rcpp_result_gen;
END_RCPP
}
// rmultinom_rcpp
Rcpp::IntegerMatrix rmultinom_rcpp(unsigned int& n, unsigned int& size, Rcpp::NumericVector& probs);
RcppExport SEXP _PMD_rmultinom_rcpp(SEXP nSEXP, SEXP sizeSEXP, SEXP probsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< unsigned int& >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type probs(probsSEXP);
    rcpp_result_gen = Rcpp::wrap(rmultinom_rcpp(n, size, probs));
    return rcpp_result_gen;
END_RCPP
}
// rpmd_arma
arma::vec rpmd_arma(arma::mat pp);
RcppExport SEXP _PMD_rpmd_arma(SEXP ppSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type pp(ppSEXP);
    rcpp_result_gen = Rcpp::wrap(rpmd_arma(pp));
    return rcpp_result_gen;
END_RCPP
}
// pm_simulation_arma
double pm_simulation_arma(arma::mat pp, arma::vec x_vec, int t);
RcppExport SEXP _PMD_pm_simulation_arma(SEXP ppSEXP, SEXP x_vecSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type pp(ppSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x_vec(x_vecSEXP);
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(pm_simulation_arma(pp, x_vec, t));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_PMD_mod", (DL_FUNC) &_PMD_mod, 2},
    {"_PMD_l_vec_compute_arma", (DL_FUNC) &_PMD_l_vec_compute_arma, 4},
    {"_PMD_pmn_mdfft_arma", (DL_FUNC) &_PMD_pmn_mdfft_arma, 5},
    {"_PMD_rmultinom_1", (DL_FUNC) &_PMD_rmultinom_1, 3},
    {"_PMD_rmultinom_rcpp", (DL_FUNC) &_PMD_rmultinom_rcpp, 3},
    {"_PMD_rpmd_arma", (DL_FUNC) &_PMD_rpmd_arma, 1},
    {"_PMD_pm_simulation_arma", (DL_FUNC) &_PMD_pm_simulation_arma, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_PMD(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
